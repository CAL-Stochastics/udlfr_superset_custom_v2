{"version":3,"file":"e8781bb15a99be12a822.chunk.js","mappings":"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","sources":["webpack://superset/./src/components/ImportModal/index.tsx","webpack://superset/./src/components/Tags/Tag.tsx","webpack://superset/./src/components/Tags/TagsList.tsx","webpack://superset/./src/features/dashboards/types.ts","webpack://superset/./src/pages/DashboardList/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\nimport { styled, t } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport Modal from 'src/components/Modal';\nimport { Upload } from 'src/components';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport { ImportResourceName } from 'src/views/CRUD/types';\nimport ErrorAlert from './ErrorAlert';\n\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\n\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\n\nexport interface ImportModelsModalProps {\n  resourceName: ImportResourceName;\n  resourceLabel: string;\n  passwordsNeededMessage: string;\n  confirmOverwriteMessage: string;\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onModelImport: () => void;\n  show: boolean;\n  onHide: () => void;\n  passwordFields?: string[];\n  setPasswordFields?: (passwordFields: string[]) => void;\n  sshTunnelPasswordFields?: string[];\n  setSSHTunnelPasswordFields?: (sshTunnelPasswordFields: string[]) => void;\n  sshTunnelPrivateKeyFields?: string[];\n  setSSHTunnelPrivateKeyFields?: (sshTunnelPrivateKeyFields: string[]) => void;\n  sshTunnelPrivateKeyPasswordFields?: string[];\n  setSSHTunnelPrivateKeyPasswordFields?: (\n    sshTunnelPrivateKeyPasswordFields: string[],\n  ) => void;\n}\n\nconst ImportModelsModal: FunctionComponent<ImportModelsModalProps> = ({\n  resourceName,\n  resourceLabel,\n  passwordsNeededMessage,\n  confirmOverwriteMessage,\n  onModelImport,\n  show,\n  onHide,\n  passwordFields = [],\n  setPasswordFields = () => {},\n  sshTunnelPasswordFields = [],\n  setSSHTunnelPasswordFields = () => {},\n  sshTunnelPrivateKeyFields = [],\n  setSSHTunnelPrivateKeyFields = () => {},\n  sshTunnelPrivateKeyPasswordFields = [],\n  setSSHTunnelPrivateKeyPasswordFields = () => {},\n}) => {\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [passwords, setPasswords] = useState<Record<string, string>>({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] =\n    useState<boolean>(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState<boolean>(false);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [importingModel, setImportingModel] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>();\n  const [sshTunnelPasswords, setSSHTunnelPasswords] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeys, setSSHTunnelPrivateKeys] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords] =\n    useState<Record<string, string>>({});\n\n  const clearModal = () => {\n    setFileList([]);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    setImportingModel(false);\n    setErrorMessage('');\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n  };\n\n  const handleErrorMsg = (msg: string) => {\n    setErrorMessage(msg);\n  };\n\n  const {\n    state: {\n      alreadyExists,\n      passwordsNeeded,\n      sshPasswordNeeded,\n      sshPrivateKeyNeeded,\n      sshPrivateKeyPasswordNeeded,\n    },\n    importResource,\n  } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n    if (passwordsNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [passwordsNeeded, setPasswordFields]);\n\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n    if (alreadyExists.length > 0) {\n      setImportingModel(false);\n    }\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n\n  useEffect(() => {\n    setSSHTunnelPasswordFields(sshPasswordNeeded);\n    if (sshPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPasswordNeeded, setSSHTunnelPasswordFields]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyFields(sshPrivateKeyNeeded);\n    if (sshPrivateKeyNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyNeeded, setSSHTunnelPrivateKeyFields]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyPasswordFields(sshPrivateKeyPasswordNeeded);\n    if (sshPrivateKeyPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyPasswordNeeded, setSSHTunnelPrivateKeyPasswordFields]);\n\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n\n  const onUpload = () => {\n    if (!(fileList[0]?.originFileObj instanceof File)) {\n      return;\n    }\n\n    setImportingModel(true);\n    importResource(\n      fileList[0].originFileObj,\n      passwords,\n      sshTunnelPasswords,\n      sshTunnelPrivateKeys,\n      sshTunnelPrivateKeyPasswords,\n      confirmedOverwrite,\n    ).then(result => {\n      if (result) {\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n\n  const changeFile = (info: UploadChangeParam) => {\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n  };\n\n  const removeFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    return false;\n  };\n\n  const confirmOverwrite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetValue = (event.currentTarget?.value as string) ?? '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n\n  const renderPasswordFields = () => {\n    if (\n      passwordFields.length === 0 &&\n      sshTunnelPasswordFields.length === 0 &&\n      sshTunnelPrivateKeyFields.length === 0 &&\n      sshTunnelPrivateKeyPasswordFields.length === 0\n    ) {\n      return null;\n    }\n\n    const files = [\n      ...new Set([\n        ...passwordFields,\n        ...sshTunnelPasswordFields,\n        ...sshTunnelPrivateKeyFields,\n        ...sshTunnelPrivateKeyPasswordFields,\n      ]),\n    ];\n\n    return (\n      <>\n        <h5>{t('Database passwords')}</h5>\n        <HelperMessage>{passwordsNeededMessage}</HelperMessage>\n        {files.map(fileName => (\n          <>\n            {passwordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer key={`password-for-${fileName}`}>\n                <div className=\"control-label\">\n                  {t('%s PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`password-${fileName}`}\n                  autoComplete={`password-${fileName}`}\n                  type=\"password\"\n                  value={passwords[fileName]}\n                  onChange={event =>\n                    setPasswords({\n                      ...passwords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPasswordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer key={`ssh_tunnel_password-for-${fileName}`}>\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`ssh_tunnel_password-${fileName}`}\n                  autoComplete={`ssh_tunnel_password-${fileName}`}\n                  type=\"password\"\n                  value={sshTunnelPasswords[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPasswords({\n                      ...sshTunnelPasswords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_password\"\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPrivateKeyFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer\n                key={`ssh_tunnel_private_key-for-${fileName}`}\n              >\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PRIVATE KEY', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <textarea\n                  name={`ssh_tunnel_private_key-${fileName}`}\n                  autoComplete={`ssh_tunnel_private_key-${fileName}`}\n                  value={sshTunnelPrivateKeys[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPrivateKeys({\n                      ...sshTunnelPrivateKeys,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_private_key\"\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPrivateKeyPasswordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer\n                key={`ssh_tunnel_private_key_password-for-${fileName}`}\n              >\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PRIVATE KEY PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`ssh_tunnel_private_key_password-${fileName}`}\n                  autoComplete={`ssh_tunnel_private_key_password-${fileName}`}\n                  type=\"password\"\n                  value={sshTunnelPrivateKeyPasswords[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPrivateKeyPasswords({\n                      ...sshTunnelPrivateKeyPasswords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_private_key_password\"\n                />\n              </StyledInputContainer>\n            )}\n          </>\n        ))}\n      </>\n    );\n  };\n\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n\n    return (\n      <>\n        <StyledInputContainer>\n          <div className=\"confirm-overwrite\">{confirmOverwriteMessage}</div>\n          <div className=\"control-label\">\n            {t('Type \"%s\" to confirm', t('OVERWRITE'))}\n          </div>\n          <input\n            data-test=\"overwrite-modal-input\"\n            id=\"overwrite\"\n            type=\"text\"\n            onChange={confirmOverwrite}\n          />\n        </StyledInputContainer>\n      </>\n    );\n  };\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <Modal\n      name=\"model\"\n      className=\"import-model-modal\"\n      disablePrimaryButton={\n        fileList.length === 0 ||\n        (needsOverwriteConfirm && !confirmedOverwrite) ||\n        importingModel\n      }\n      onHandledPrimaryAction={onUpload}\n      onHide={hide}\n      primaryButtonName={needsOverwriteConfirm ? t('Overwrite') : t('Import')}\n      primaryButtonType={needsOverwriteConfirm ? 'danger' : 'primary'}\n      width=\"750px\"\n      show={show}\n      title={<h4>{t('Import %s', resourceLabel)}</h4>}\n    >\n      <StyledInputContainer>\n        <Upload\n          name=\"modelFile\"\n          id=\"modelFile\"\n          data-test=\"model-file-input\"\n          accept=\".yaml,.json,.yml,.zip\"\n          fileList={fileList}\n          onChange={changeFile}\n          onRemove={removeFile}\n          // upload is handled by hook\n          customRequest={() => {}}\n          disabled={importingModel}\n        >\n          <Button loading={importingModel}>{t('Select file')}</Button>\n        </Upload>\n      </StyledInputContainer>\n      {errorMessage && (\n        <ErrorAlert\n          errorMessage={errorMessage}\n          showDbInstallInstructions={\n            passwordFields.length > 0 ||\n            sshTunnelPasswordFields.length > 0 ||\n            sshTunnelPrivateKeyFields.length > 0 ||\n            sshTunnelPrivateKeyPasswordFields.length > 0\n          }\n        />\n      )}\n      {renderPasswordFields()}\n      {renderOverwriteConfirmation()}\n    </Modal>\n  );\n};\n\nexport default ImportModelsModal;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { styled } from '@superset-ui/core';\nimport TagType from 'src/types/TagType';\nimport AntdTag from 'antd/lib/tag';\nimport React, { useMemo } from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\n\nconst StyledTag = styled(AntdTag)`\n  ${({ theme }) => `\n  margin-top: ${theme.gridUnit}px;\n  margin-bottom: ${theme.gridUnit}px;\n  font-size: ${theme.typography.sizes.s}px;\n  `};\n`;\n\nconst MAX_DISPLAY_CHAR = 20;\n\nconst Tag = ({\n  name,\n  id,\n  index = undefined,\n  onDelete = undefined,\n  editable = false,\n  onClick = undefined,\n  toolTipTitle = name,\n}: TagType) => {\n  const isLongTag = useMemo(() => name.length > MAX_DISPLAY_CHAR, [name]);\n  const tagDisplay = isLongTag ? `${name.slice(0, MAX_DISPLAY_CHAR)}...` : name;\n\n  const handleClose = () => (index ? onDelete?.(index) : null);\n\n  const tagElem = (\n    <>\n      {editable ? (\n        <Tooltip title={toolTipTitle} key={toolTipTitle}>\n          <StyledTag\n            key={id}\n            closable={editable}\n            onClose={handleClose}\n            color=\"blue\"\n          >\n            {tagDisplay}\n          </StyledTag>\n        </Tooltip>\n      ) : (\n        <Tooltip title={toolTipTitle} key={toolTipTitle}>\n          <StyledTag data-test=\"tag\" role=\"link\" key={id} onClick={onClick}>\n            {id ? (\n              <a\n                href={`/superset/all_entities/?id=${id}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                {tagDisplay}\n              </a>\n            ) : (\n              tagDisplay\n            )}\n          </StyledTag>\n        </Tooltip>\n      )}\n    </>\n  );\n\n  return tagElem;\n};\n\nexport default Tag;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useMemo, useState } from 'react';\nimport { styled } from '@superset-ui/core';\nimport TagType from 'src/types/TagType';\nimport Tag from './Tag';\n\nexport type TagsListProps = {\n  tags: TagType[];\n  editable?: boolean;\n  /**\n   * OnDelete:\n   * Only applies when editable is true\n   * Callback for when a tag is deleted\n   */\n  onDelete?: ((index: number) => void) | undefined;\n  maxTags?: number | undefined;\n};\n\nconst TagsDiv = styled.div`\n  max-width: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n\nconst TagsList = ({\n  tags,\n  editable = false,\n  onDelete,\n  maxTags,\n}: TagsListProps) => {\n  const [tempMaxTags, setTempMaxTags] = useState<number | undefined>(maxTags);\n\n  const handleDelete = (index: number) => {\n    onDelete?.(index);\n  };\n\n  const expand = () => setTempMaxTags(undefined);\n\n  const collapse = () => setTempMaxTags(maxTags);\n\n  const tagsIsLong: boolean | null = useMemo(\n    () => (tempMaxTags ? tags.length > tempMaxTags : null),\n    [tags.length, tempMaxTags],\n  );\n\n  const extraTags: number | null = useMemo(\n    () =>\n      typeof tempMaxTags === 'number' ? tags.length - tempMaxTags + 1 : null,\n    [tagsIsLong, tags.length, tempMaxTags],\n  );\n\n  return (\n    <TagsDiv className=\"tag-list\">\n      {tagsIsLong && typeof tempMaxTags === 'number' ? (\n        <>\n          {tags.slice(0, tempMaxTags - 1).map((tag: TagType, index) => (\n            <Tag\n              id={tag.id}\n              key={tag.id}\n              name={tag.name}\n              index={index}\n              onDelete={handleDelete}\n              editable={editable}\n            />\n          ))}\n          {tags.length > tempMaxTags ? (\n            <Tag\n              name={`+${extraTags}...`}\n              onClick={expand}\n              toolTipTitle={tags.map(t => t.name).join(', ')}\n            />\n          ) : null}\n        </>\n      ) : (\n        <>\n          {tags.map((tag: TagType, index) => (\n            <Tag\n              id={tag.id}\n              key={tag.id}\n              name={tag.name}\n              index={index}\n              onDelete={handleDelete}\n              editable={editable}\n            />\n          ))}\n          {maxTags ? (\n            tags.length > maxTags ? (\n              <Tag name=\"...\" onClick={collapse} />\n            ) : null\n          ) : null}\n        </>\n      )}\n    </TagsDiv>\n  );\n};\n\nexport default TagsList;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport type DashboardObject = {\n  dashboard_title: string;\n  description?: string;\n  css?: string;\n  slug?: string;\n  position?: string;\n  metadata?: string;\n};\n\nexport enum DashboardStatus {\n  PUBLISHED = 'published',\n  DRAFT = 'draft',\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  isFeatureEnabled,\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport { useSelector } from 'react-redux';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport rison from 'rison';\nimport {\n  createFetchRelated,\n  createErrorHandler,\n  handleDashboardDelete,\n} from 'src/views/CRUD/utils';\nimport { useListViewResource, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { TagsList } from 'src/components/Tags';\nimport handleResourceExport from 'src/utils/export';\nimport Loading from 'src/components/Loading';\nimport SubMenu, { SubMenuProps } from 'src/features/home/SubMenu';\nimport ListView, {\n  ListViewProps,\n  Filter,\n  Filters,\n  FilterOperator,\n} from 'src/components/ListView';\nimport { dangerouslyGetItemDoNotUse } from 'src/utils/localStorageHelpers';\nimport Owner from 'src/types/Owner';\nimport Tag from 'src/types/TagType';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport FacePile from 'src/components/FacePile';\nimport Icons from 'src/components/Icons';\nimport DeleteModal from 'src/components/DeleteModal';\nimport FaveStar from 'src/components/FaveStar';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport { Tooltip } from 'src/components/Tooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\n\nimport Dashboard from 'src/dashboard/containers/Dashboard';\nimport { Dashboard as CRUDDashboard } from 'src/views/CRUD/types';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport { loadTags } from 'src/components/Tags/utils';\nimport DashboardCard from 'src/features/dashboards/DashboardCard';\nimport { DashboardStatus } from 'src/features/dashboards/types';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport { findPermission } from 'src/utils/findPermission';\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the dashboards. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more dashboards that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\ninterface DashboardListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nexport interface Dashboard {\n  changed_by_name: string;\n  changed_on_delta_humanized: string;\n  changed_by: string;\n  dashboard_title: string;\n  id: number;\n  published: boolean;\n  url: string;\n  thumbnail_url: string;\n  owners: Owner[];\n  tags: Tag[];\n  created_by: object;\n}\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nfunction DashboardList(props: DashboardListProps) {\n  const {\n    addDangerToast,\n    addSuccessToast,\n    user: { userId },\n  } = props;\n\n  const { roles } = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n  const canReadTag = findPermission('can_read', 'Tag', roles);\n\n  const {\n    state: {\n      loading,\n      resourceCount: dashboardCount,\n      resourceCollection: dashboards,\n      bulkSelectEnabled,\n    },\n    setResourceCollection: setDashboards,\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Dashboard>(\n    'dashboard',\n    t('dashboard'),\n    addDangerToast,\n  );\n  const dashboardIds = useMemo(() => dashboards.map(d => d.id), [dashboards]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus(\n    'dashboard',\n    dashboardIds,\n    addDangerToast,\n  );\n\n  const [dashboardToEdit, setDashboardToEdit] = useState<Dashboard | null>(\n    null,\n  );\n  const [dashboardToDelete, setDashboardToDelete] =\n    useState<CRUDDashboard | null>(null);\n\n  const [importingDashboard, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState<\n    string[]\n  >([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState<\n    string[]\n  >([]);\n  const [\n    sshTunnelPrivateKeyPasswordFields,\n    setSSHTunnelPrivateKeyPasswordFields,\n  ] = useState<string[]>([]);\n\n  const openDashboardImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeDashboardImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleDashboardImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dashboard imported'));\n  };\n\n  // TODO: Fix usage of localStorage keying on the user id\n  const userKey = dangerouslyGetItemDoNotUse(userId?.toString(), null);\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n\n  function openDashboardEditModal(dashboard: Dashboard) {\n    setDashboardToEdit(dashboard);\n  }\n\n  function handleDashboardEdit(edits: Dashboard) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${edits.id}`,\n    }).then(\n      ({ json = {} }) => {\n        setDashboards(\n          dashboards.map(dashboard => {\n            if (dashboard.id === json?.result?.id) {\n              const {\n                changed_by_name,\n                changed_by,\n                dashboard_title = '',\n                slug = '',\n                json_metadata = '',\n                changed_on_delta_humanized,\n                url = '',\n                certified_by = '',\n                certification_details = '',\n                owners,\n                tags,\n              } = json.result;\n              return {\n                ...dashboard,\n                changed_by_name,\n                changed_by,\n                dashboard_title,\n                slug,\n                json_metadata,\n                changed_on_delta_humanized,\n                url,\n                certified_by,\n                certification_details,\n                owners,\n                tags,\n              };\n            }\n            return dashboard;\n          }),\n        );\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('An error occurred while fetching dashboards: %s', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const handleBulkDashboardExport = (dashboardsToExport: Dashboard[]) => {\n    const ids = dashboardsToExport.map(({ id }) => id);\n    handleResourceExport('dashboard', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  function handleBulkDashboardDelete(dashboardsToDelete: Dashboard[]) {\n    return SupersetClient.delete({\n      endpoint: `/api/v1/dashboard/?q=${rison.encode(\n        dashboardsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected dashboards: ', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { id },\n          },\n        }: any) =>\n          userId && (\n            <FaveStar\n              itemId={id}\n              saveFaveStar={saveFavoriteStatus}\n              isStarred={favoriteStatus[id]}\n            />\n          ),\n        Header: '',\n        id: 'id',\n        disableSortBy: true,\n        size: 'xs',\n        hidden: !userId,\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              url,\n              dashboard_title: dashboardTitle,\n              certified_by: certifiedBy,\n              certification_details: certificationDetails,\n            },\n          },\n        }: any) => (\n          <Link to={url}>\n            {certifiedBy && (\n              <>\n                <CertifiedBadge\n                  certifiedBy={certifiedBy}\n                  details={certificationDetails}\n                />{' '}\n              </>\n            )}\n            {dashboardTitle}\n          </Link>\n        ),\n        Header: t('Title'),\n        accessor: 'dashboard_title',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { tags = [] },\n          },\n        }: {\n          row: {\n            original: {\n              tags: Tag[];\n            };\n          };\n        }) => (\n          // Only show custom type tags\n          <TagsList\n            tags={tags.filter(\n              (tag: Tag) => tag.type === 'TagTypes.custom' || tag.type === 1,\n            )}\n            maxTags={3}\n          />\n        ),\n        Header: t('Tags'),\n        accessor: 'tags',\n        disableSortBy: true,\n        hidden: !isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM),\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_by_name: changedByName },\n          },\n        }: any) => <>{changedByName}</>,\n        Header: t('Modified by'),\n        accessor: 'changed_by.first_name',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { status },\n          },\n        }: any) =>\n          status === DashboardStatus.PUBLISHED ? t('Published') : t('Draft'),\n        Header: t('Status'),\n        accessor: 'published',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => <span className=\"no-wrap\">{changedOn}</span>,\n        Header: t('Modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { created_by: createdBy },\n          },\n        }: any) =>\n          createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n        Header: t('Created by'),\n        accessor: 'created_by',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { owners = [] },\n          },\n        }: any) => <FacePile users={owners} />,\n        Header: t('Owners'),\n        accessor: 'owners',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleDelete = () =>\n            handleDashboardDelete(\n              original,\n              refreshData,\n              addSuccessToast,\n              addDangerToast,\n            );\n          const handleEdit = () => openDashboardEditModal(original);\n          const handleExport = () => handleBulkDashboardExport([original]);\n\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <ConfirmStatusChange\n                  title={t('Please confirm')}\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{original.dashboard_title}</b>?\n                    </>\n                  }\n                  onConfirm={handleDelete}\n                >\n                  {confirmDelete => (\n                    <Tooltip\n                      id=\"delete-action-tooltip\"\n                      title={t('Delete')}\n                      placement=\"bottom\"\n                    >\n                      <span\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"action-button\"\n                        onClick={confirmDelete}\n                      >\n                        <Icons.Trash data-test=\"dashboard-list-trash-icon\" />\n                      </span>\n                    </Tooltip>\n                  )}\n                </ConfirmStatusChange>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleEdit}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete && !canExport,\n        disableSortBy: true,\n      },\n    ],\n    [\n      userId,\n      canEdit,\n      canDelete,\n      canExport,\n      saveFavoriteStatus,\n      favoriteStatus,\n      refreshData,\n      addSuccessToast,\n      addDangerToast,\n    ],\n  );\n\n  const favoritesFilter: Filter = useMemo(\n    () => ({\n      Header: t('Favorite'),\n      key: 'favorite',\n      id: 'id',\n      urlDisplay: 'favorite',\n      input: 'select',\n      operator: FilterOperator.dashboardIsFav,\n      unfilteredLabel: t('Any'),\n      selects: [\n        { label: t('Yes'), value: true },\n        { label: t('No'), value: false },\n      ],\n    }),\n    [],\n  );\n\n  const filters: Filters = useMemo(() => {\n    const filters_list = [\n      {\n        Header: t('Search'),\n        key: 'search',\n        id: 'dashboard_title',\n        input: 'search',\n        operator: FilterOperator.titleOrSlug,\n      },\n      {\n        Header: t('Owner'),\n        key: 'owner',\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.relationManyMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'dashboard',\n          'owners',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching dashboard owner values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Created by'),\n        key: 'created_by',\n        id: 'created_by',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'dashboard',\n          'created_by',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching dashboard created by values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Status'),\n        key: 'published',\n        id: 'published',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Published'), value: true },\n          { label: t('Draft'), value: false },\n        ],\n      },\n      ...(userId ? [favoritesFilter] : []),\n      {\n        Header: t('Certified'),\n        key: 'certified',\n        id: 'id',\n        urlDisplay: 'certified',\n        input: 'select',\n        operator: FilterOperator.dashboardIsCertified,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n    ] as Filters;\n    if (isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM) && canReadTag) {\n      filters_list.push({\n        Header: t('Tags'),\n        key: 'tags',\n        id: 'tags',\n        input: 'select',\n        operator: FilterOperator.dashboardTags,\n        unfilteredLabel: t('All'),\n        fetchSelects: loadTags,\n      });\n    }\n    return filters_list;\n  }, [addDangerToast, favoritesFilter, props.user]);\n\n  const sortTypes = [\n    {\n      desc: false,\n      id: 'dashboard_title',\n      label: t('Alphabetical'),\n      value: 'alphabetical',\n    },\n    {\n      desc: true,\n      id: 'changed_on_delta_humanized',\n      label: t('Recently modified'),\n      value: 'recently_modified',\n    },\n    {\n      desc: false,\n      id: 'changed_on_delta_humanized',\n      label: t('Least recently modified'),\n      value: 'least_recently_modified',\n    },\n  ];\n\n  const renderCard = useCallback(\n    (dashboard: Dashboard) => (\n      <DashboardCard\n        dashboard={dashboard}\n        hasPerm={hasPerm}\n        bulkSelectEnabled={bulkSelectEnabled}\n        showThumbnails={\n          userKey\n            ? userKey.thumbnails\n            : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n        }\n        userId={userId}\n        loading={loading}\n        openDashboardEditModal={openDashboardEditModal}\n        saveFavoriteStatus={saveFavoriteStatus}\n        favoriteStatus={favoriteStatus[dashboard.id]}\n        handleBulkDashboardExport={handleBulkDashboardExport}\n        onDelete={dashboard => setDashboardToDelete(dashboard)}\n      />\n    ),\n    [\n      bulkSelectEnabled,\n      favoriteStatus,\n      hasPerm,\n      loading,\n      userId,\n      saveFavoriteStatus,\n      userKey,\n    ],\n  );\n\n  const subMenuButtons: SubMenuProps['buttons'] = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect,\n    });\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Dashboard')}\n        </>\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        window.location.assign('/dashboard/new');\n      },\n    });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      subMenuButtons.push({\n        name: (\n          <Tooltip\n            id=\"import-tooltip\"\n            title={t('Import dashboards')}\n            placement=\"bottomRight\"\n          >\n            <Icons.Import data-test=\"import-button\" />\n          </Tooltip>\n        ),\n        buttonStyle: 'link',\n        onClick: openDashboardImportModal,\n      });\n    }\n  }\n  return (\n    <>\n      <SubMenu name={t('Dashboards')} buttons={subMenuButtons} />\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t(\n          'Are you sure you want to delete the selected dashboards?',\n        )}\n        onConfirm={handleBulkDashboardDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              type: 'danger',\n              onSelect: confirmDelete,\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkDashboardExport,\n            });\n          }\n          return (\n            <>\n              {dashboardToEdit && (\n                <PropertiesModal\n                  dashboardId={dashboardToEdit.id}\n                  show\n                  onHide={() => setDashboardToEdit(null)}\n                  onSubmit={handleDashboardEdit}\n                />\n              )}\n              {dashboardToDelete && (\n                <DeleteModal\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{dashboardToDelete.dashboard_title}</b>?\n                    </>\n                  }\n                  onConfirm={() => {\n                    handleDashboardDelete(\n                      dashboardToDelete,\n                      refreshData,\n                      addSuccessToast,\n                      addDangerToast,\n                      undefined,\n                      userId,\n                    );\n                    setDashboardToDelete(null);\n                  }}\n                  onHide={() => setDashboardToDelete(null)}\n                  open={!!dashboardToDelete}\n                  title={t('Please confirm')}\n                />\n              )}\n              <ListView<Dashboard>\n                bulkActions={bulkActions}\n                bulkSelectEnabled={bulkSelectEnabled}\n                cardSortSelectOptions={sortTypes}\n                className=\"dashboard-list-view\"\n                columns={columns}\n                count={dashboardCount}\n                data={dashboards}\n                disableBulkSelect={toggleBulkSelect}\n                fetchData={fetchData}\n                refreshData={refreshData}\n                filters={filters}\n                initialSort={initialSort}\n                loading={loading}\n                pageSize={PAGE_SIZE}\n                addSuccessToast={addSuccessToast}\n                addDangerToast={addDangerToast}\n                showThumbnails={\n                  userKey\n                    ? userKey.thumbnails\n                    : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n                }\n                renderCard={renderCard}\n                defaultViewMode={\n                  isFeatureEnabled(FeatureFlag.LISTVIEWS_DEFAULT_CARD_VIEW)\n                    ? 'card'\n                    : 'table'\n                }\n                enableBulkTag\n                bulkTagResourceName=\"dashboard\"\n              />\n            </>\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"dashboard\"\n        resourceLabel={t('dashboard')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleDashboardImport}\n        show={importingDashboard}\n        onHide={closeDashboardImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n        sshTunnelPasswordFields={sshTunnelPasswordFields}\n        setSSHTunnelPasswordFields={setSSHTunnelPasswordFields}\n        sshTunnelPrivateKeyFields={sshTunnelPrivateKeyFields}\n        setSSHTunnelPrivateKeyFields={setSSHTunnelPrivateKeyFields}\n        sshTunnelPrivateKeyPasswordFields={sshTunnelPrivateKeyPasswordFields}\n        setSSHTunnelPrivateKeyPasswordFields={\n          setSSHTunnelPrivateKeyPasswordFields\n        }\n      />\n\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(DashboardList);\n"],"names":["HelperMessage","styled","div","_ref","theme","colors","grayscale","base","_ref2","typography","sizes","s","StyledInputContainer","_ref3","gridUnit","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","light1","_ref10","_ref11","_ref12","light2","_ref13","_ref14","_ref15","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","show","onHide","passwordFields","setPasswordFields","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","isHidden","setIsHidden","useState","passwords","setPasswords","needsOverwriteConfirm","setNeedsOverwriteConfirm","confirmedOverwrite","setConfirmedOverwrite","fileList","setFileList","importingModel","setImportingModel","errorMessage","setErrorMessage","sshTunnelPasswords","setSSHTunnelPasswords","sshTunnelPrivateKeys","setSSHTunnelPrivateKeys","sshTunnelPrivateKeyPasswords","setSSHTunnelPrivateKeyPasswords","clearModal","state","alreadyExists","passwordsNeeded","sshPasswordNeeded","sshPrivateKeyNeeded","sshPrivateKeyPasswordNeeded","importResource","useImportResource","msg","useEffect","length","___EmotionJSX","Modal","name","className","disablePrimaryButton","onHandledPrimaryAction","onUpload","_fileList$","originFileObj","File","then","result","hide","primaryButtonName","t","primaryButtonType","width","title","Upload","id","accept","onChange","info","file","status","onRemove","removedFile","filter","uid","customRequest","disabled","Button","loading","ErrorAlert","showDbInstallInstructions","renderPasswordFields","files","Set","React","map","fileName","indexOf","key","slice","autoComplete","type","value","event","target","_event$currentTarget$","_event$currentTarget","targetValue","currentTarget","toUpperCase","StyledTag","AntdTag","index","onDelete","editable","onClick","toolTipTitle","tagDisplay","useMemo","Tooltip","closable","onClose","handleClose","color","role","href","rel","TagsDiv","tags","maxTags","tempMaxTags","setTempMaxTags","handleDelete","tagsIsLong","extraTags","tag","Tag","expand","undefined","join","collapse","DashboardStatus","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","Actions","withToasts","props","addDangerToast","addSuccessToast","user","userId","roles","useSelector","canReadTag","findPermission","resourceCount","dashboardCount","resourceCollection","dashboards","bulkSelectEnabled","setResourceCollection","setDashboards","hasPerm","fetchData","toggleBulkSelect","refreshData","useListViewResource","dashboardIds","d","saveFavoriteStatus","favoriteStatus","useFavoriteStatus","dashboardToEdit","setDashboardToEdit","dashboardToDelete","setDashboardToDelete","importingDashboard","showImportModal","preparingExport","setPreparingExport","userKey","dangerouslyGetItemDoNotUse","toString","canCreate","canEdit","canDelete","canExport","isFeatureEnabled","FeatureFlag","VERSIONED_EXPORT","initialSort","desc","openDashboardEditModal","dashboard","handleDashboardEdit","edits","SupersetClient","get","endpoint","json","_json$result","changed_by_name","changed_by","dashboard_title","slug","json_metadata","changed_on_delta_humanized","url","certified_by","certification_details","owners","createErrorHandler","errMsg","handleBulkDashboardExport","dashboardsToExport","ids","handleResourceExport","columns","Cell","row","original","FaveStar","itemId","saveFaveStar","isStarred","Header","disableSortBy","size","hidden","dashboardTitle","certifiedBy","certificationDetails","Link","to","CertifiedBadge","details","accessor","TagsList","TAGGING_SYSTEM","changedByName","PUBLISHED","changedOn","created_by","createdBy","first_name","last_name","FacePile","users","ConfirmStatusChange","description","onConfirm","handleDashboardDelete","confirmDelete","placement","tabIndex","Icons","Trash","handleExport","Share","handleEdit","EditAlt","favoritesFilter","urlDisplay","input","operator","FilterOperator","dashboardIsFav","unfilteredLabel","selects","label","filters","filters_list","titleOrSlug","relationManyMany","fetchSelects","createFetchRelated","paginate","relationOneMany","equals","dashboardIsCertified","push","dashboardTags","loadTags","sortTypes","renderCard","useCallback","DashboardCard","showThumbnails","thumbnails","THUMBNAILS","subMenuButtons","buttonStyle","window","location","assign","Import","openDashboardImportModal","SubMenu","buttons","dashboardsToDelete","delete","rison","message","bulkActions","onSelect","PropertiesModal","dashboardId","onSubmit","DeleteModal","open","ListView","cardSortSelectOptions","count","data","disableBulkSelect","pageSize","defaultViewMode","LISTVIEWS_DEFAULT_CARD_VIEW","enableBulkTag","bulkTagResourceName","ImportModelsModal","handleDashboardImport","closeDashboardImportModal","Loading"],"sourceRoot":""}