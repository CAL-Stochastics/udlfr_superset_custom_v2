{"version":3,"file":"dd263fc2ae85d6c9a70d.chunk.js","mappings":"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","sources":["webpack://superset/./src/components/ImportModal/index.tsx","webpack://superset/./src/features/datasets/DuplicateDatasetModal.tsx","webpack://superset/./src/pages/DatasetList/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\nimport { styled, t } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport Modal from 'src/components/Modal';\nimport { Upload } from 'src/components';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport { ImportResourceName } from 'src/views/CRUD/types';\nimport ErrorAlert from './ErrorAlert';\n\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\n\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\n\nexport interface ImportModelsModalProps {\n  resourceName: ImportResourceName;\n  resourceLabel: string;\n  passwordsNeededMessage: string;\n  confirmOverwriteMessage: string;\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onModelImport: () => void;\n  show: boolean;\n  onHide: () => void;\n  passwordFields?: string[];\n  setPasswordFields?: (passwordFields: string[]) => void;\n  sshTunnelPasswordFields?: string[];\n  setSSHTunnelPasswordFields?: (sshTunnelPasswordFields: string[]) => void;\n  sshTunnelPrivateKeyFields?: string[];\n  setSSHTunnelPrivateKeyFields?: (sshTunnelPrivateKeyFields: string[]) => void;\n  sshTunnelPrivateKeyPasswordFields?: string[];\n  setSSHTunnelPrivateKeyPasswordFields?: (\n    sshTunnelPrivateKeyPasswordFields: string[],\n  ) => void;\n}\n\nconst ImportModelsModal: FunctionComponent<ImportModelsModalProps> = ({\n  resourceName,\n  resourceLabel,\n  passwordsNeededMessage,\n  confirmOverwriteMessage,\n  onModelImport,\n  show,\n  onHide,\n  passwordFields = [],\n  setPasswordFields = () => {},\n  sshTunnelPasswordFields = [],\n  setSSHTunnelPasswordFields = () => {},\n  sshTunnelPrivateKeyFields = [],\n  setSSHTunnelPrivateKeyFields = () => {},\n  sshTunnelPrivateKeyPasswordFields = [],\n  setSSHTunnelPrivateKeyPasswordFields = () => {},\n}) => {\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [passwords, setPasswords] = useState<Record<string, string>>({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] =\n    useState<boolean>(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState<boolean>(false);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [importingModel, setImportingModel] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>();\n  const [sshTunnelPasswords, setSSHTunnelPasswords] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeys, setSSHTunnelPrivateKeys] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords] =\n    useState<Record<string, string>>({});\n\n  const clearModal = () => {\n    setFileList([]);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    setImportingModel(false);\n    setErrorMessage('');\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n  };\n\n  const handleErrorMsg = (msg: string) => {\n    setErrorMessage(msg);\n  };\n\n  const {\n    state: {\n      alreadyExists,\n      passwordsNeeded,\n      sshPasswordNeeded,\n      sshPrivateKeyNeeded,\n      sshPrivateKeyPasswordNeeded,\n    },\n    importResource,\n  } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n    if (passwordsNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [passwordsNeeded, setPasswordFields]);\n\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n    if (alreadyExists.length > 0) {\n      setImportingModel(false);\n    }\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n\n  useEffect(() => {\n    setSSHTunnelPasswordFields(sshPasswordNeeded);\n    if (sshPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPasswordNeeded, setSSHTunnelPasswordFields]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyFields(sshPrivateKeyNeeded);\n    if (sshPrivateKeyNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyNeeded, setSSHTunnelPrivateKeyFields]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyPasswordFields(sshPrivateKeyPasswordNeeded);\n    if (sshPrivateKeyPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyPasswordNeeded, setSSHTunnelPrivateKeyPasswordFields]);\n\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n\n  const onUpload = () => {\n    if (!(fileList[0]?.originFileObj instanceof File)) {\n      return;\n    }\n\n    setImportingModel(true);\n    importResource(\n      fileList[0].originFileObj,\n      passwords,\n      sshTunnelPasswords,\n      sshTunnelPrivateKeys,\n      sshTunnelPrivateKeyPasswords,\n      confirmedOverwrite,\n    ).then(result => {\n      if (result) {\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n\n  const changeFile = (info: UploadChangeParam) => {\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n  };\n\n  const removeFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    return false;\n  };\n\n  const confirmOverwrite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetValue = (event.currentTarget?.value as string) ?? '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n\n  const renderPasswordFields = () => {\n    if (\n      passwordFields.length === 0 &&\n      sshTunnelPasswordFields.length === 0 &&\n      sshTunnelPrivateKeyFields.length === 0 &&\n      sshTunnelPrivateKeyPasswordFields.length === 0\n    ) {\n      return null;\n    }\n\n    const files = [\n      ...new Set([\n        ...passwordFields,\n        ...sshTunnelPasswordFields,\n        ...sshTunnelPrivateKeyFields,\n        ...sshTunnelPrivateKeyPasswordFields,\n      ]),\n    ];\n\n    return (\n      <>\n        <h5>{t('Database passwords')}</h5>\n        <HelperMessage>{passwordsNeededMessage}</HelperMessage>\n        {files.map(fileName => (\n          <>\n            {passwordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer key={`password-for-${fileName}`}>\n                <div className=\"control-label\">\n                  {t('%s PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`password-${fileName}`}\n                  autoComplete={`password-${fileName}`}\n                  type=\"password\"\n                  value={passwords[fileName]}\n                  onChange={event =>\n                    setPasswords({\n                      ...passwords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPasswordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer key={`ssh_tunnel_password-for-${fileName}`}>\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`ssh_tunnel_password-${fileName}`}\n                  autoComplete={`ssh_tunnel_password-${fileName}`}\n                  type=\"password\"\n                  value={sshTunnelPasswords[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPasswords({\n                      ...sshTunnelPasswords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_password\"\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPrivateKeyFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer\n                key={`ssh_tunnel_private_key-for-${fileName}`}\n              >\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PRIVATE KEY', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <textarea\n                  name={`ssh_tunnel_private_key-${fileName}`}\n                  autoComplete={`ssh_tunnel_private_key-${fileName}`}\n                  value={sshTunnelPrivateKeys[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPrivateKeys({\n                      ...sshTunnelPrivateKeys,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_private_key\"\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPrivateKeyPasswordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer\n                key={`ssh_tunnel_private_key_password-for-${fileName}`}\n              >\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PRIVATE KEY PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`ssh_tunnel_private_key_password-${fileName}`}\n                  autoComplete={`ssh_tunnel_private_key_password-${fileName}`}\n                  type=\"password\"\n                  value={sshTunnelPrivateKeyPasswords[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPrivateKeyPasswords({\n                      ...sshTunnelPrivateKeyPasswords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_private_key_password\"\n                />\n              </StyledInputContainer>\n            )}\n          </>\n        ))}\n      </>\n    );\n  };\n\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n\n    return (\n      <>\n        <StyledInputContainer>\n          <div className=\"confirm-overwrite\">{confirmOverwriteMessage}</div>\n          <div className=\"control-label\">\n            {t('Type \"%s\" to confirm', t('OVERWRITE'))}\n          </div>\n          <input\n            data-test=\"overwrite-modal-input\"\n            id=\"overwrite\"\n            type=\"text\"\n            onChange={confirmOverwrite}\n          />\n        </StyledInputContainer>\n      </>\n    );\n  };\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <Modal\n      name=\"model\"\n      className=\"import-model-modal\"\n      disablePrimaryButton={\n        fileList.length === 0 ||\n        (needsOverwriteConfirm && !confirmedOverwrite) ||\n        importingModel\n      }\n      onHandledPrimaryAction={onUpload}\n      onHide={hide}\n      primaryButtonName={needsOverwriteConfirm ? t('Overwrite') : t('Import')}\n      primaryButtonType={needsOverwriteConfirm ? 'danger' : 'primary'}\n      width=\"750px\"\n      show={show}\n      title={<h4>{t('Import %s', resourceLabel)}</h4>}\n    >\n      <StyledInputContainer>\n        <Upload\n          name=\"modelFile\"\n          id=\"modelFile\"\n          data-test=\"model-file-input\"\n          accept=\".yaml,.json,.yml,.zip\"\n          fileList={fileList}\n          onChange={changeFile}\n          onRemove={removeFile}\n          // upload is handled by hook\n          customRequest={() => {}}\n          disabled={importingModel}\n        >\n          <Button loading={importingModel}>{t('Select file')}</Button>\n        </Upload>\n      </StyledInputContainer>\n      {errorMessage && (\n        <ErrorAlert\n          errorMessage={errorMessage}\n          showDbInstallInstructions={\n            passwordFields.length > 0 ||\n            sshTunnelPasswordFields.length > 0 ||\n            sshTunnelPrivateKeyFields.length > 0 ||\n            sshTunnelPrivateKeyPasswordFields.length > 0\n          }\n        />\n      )}\n      {renderPasswordFields()}\n      {renderOverwriteConfirmation()}\n    </Modal>\n  );\n};\n\nexport default ImportModelsModal;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport { FormLabel } from 'src/components/Form';\nimport { Input } from 'src/components/Input';\nimport Modal from 'src/components/Modal';\nimport Dataset from 'src/types/Dataset';\n\ninterface DuplicateDatasetModalProps {\n  dataset: Dataset | null;\n  onHide: () => void;\n  onDuplicate: (newDatasetName: string) => void;\n}\n\nconst DuplicateDatasetModal: FunctionComponent<DuplicateDatasetModalProps> = ({\n  dataset,\n  onHide,\n  onDuplicate,\n}) => {\n  const [show, setShow] = useState<boolean>(false);\n  const [disableSave, setDisableSave] = useState<boolean>(false);\n  const [newDuplicateDatasetName, setNewDuplicateDatasetName] =\n    useState<string>('');\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetValue = event.target.value ?? '';\n    setNewDuplicateDatasetName(targetValue);\n    setDisableSave(targetValue === '');\n  };\n\n  const duplicateDataset = () => {\n    onDuplicate(newDuplicateDatasetName);\n  };\n\n  useEffect(() => {\n    setNewDuplicateDatasetName('');\n    setShow(dataset !== null);\n  }, [dataset]);\n\n  return (\n    <Modal\n      show={show}\n      onHide={onHide}\n      title={t('Duplicate dataset')}\n      disablePrimaryButton={disableSave}\n      onHandledPrimaryAction={duplicateDataset}\n      primaryButtonName={t('Duplicate')}\n    >\n      <FormLabel htmlFor=\"duplicate\">{t('New dataset name')}</FormLabel>\n      <Input\n        data-test=\"duplicate-modal-input\"\n        type=\"text\"\n        id=\"duplicate\"\n        autoComplete=\"off\"\n        value={newDuplicateDatasetName}\n        onChange={onChange}\n        onPressEnter={duplicateDataset}\n      />\n    </Modal>\n  );\n};\n\nexport default DuplicateDatasetModal;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  isFeatureEnabled,\n  FeatureFlag,\n  getExtensionsRegistry,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport React, {\n  FunctionComponent,\n  useState,\n  useMemo,\n  useCallback,\n} from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport rison from 'rison';\nimport {\n  createFetchRelated,\n  createFetchDistinct,\n  createErrorHandler,\n} from 'src/views/CRUD/utils';\nimport { ColumnObject } from 'src/features/datasets/types';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { DatasourceModal } from 'src/components/Datasource';\nimport DeleteModal from 'src/components/DeleteModal';\nimport handleResourceExport from 'src/utils/export';\nimport ListView, {\n  ListViewProps,\n  Filters,\n  FilterOperator,\n} from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport SubMenu, { SubMenuProps, ButtonProps } from 'src/features/home/SubMenu';\nimport Owner from 'src/types/Owner';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport FacePile from 'src/components/FacePile';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { isUserAdmin } from 'src/dashboard/util/permissionUtils';\nimport { GenericLink } from 'src/components/GenericLink/GenericLink';\n\nimport {\n  PAGE_SIZE,\n  SORT_BY,\n  PASSWORDS_NEEDED_MESSAGE,\n  CONFIRM_OVERWRITE_MESSAGE,\n} from 'src/features/datasets/constants';\nimport DuplicateDatasetModal from 'src/features/datasets/DuplicateDatasetModal';\nimport { useSelector } from 'react-redux';\n\nconst extensionsRegistry = getExtensionsRegistry();\nconst DatasetDeleteRelatedExtension = extensionsRegistry.get(\n  'dataset.delete.related',\n);\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n\n  .disabled {\n    svg,\n    i {\n      &:hover {\n        path {\n          fill: ${({ theme }) => theme.colors.grayscale.light1};\n        }\n      }\n    }\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    .ant-menu-item:hover {\n      color: ${({ theme }) => theme.colors.grayscale.light1};\n      cursor: default;\n    }\n    &::after {\n      color: ${({ theme }) => theme.colors.grayscale.light1};\n    }\n  }\n`;\n\ntype Dataset = {\n  changed_by_name: string;\n  changed_by: string;\n  changed_on_delta_humanized: string;\n  database: {\n    id: string;\n    database_name: string;\n  };\n  kind: string;\n  explore_url: string;\n  id: number;\n  owners: Array<Owner>;\n  schema: string;\n  table_name: string;\n};\n\ninterface VirtualDataset extends Dataset {\n  extra: Record<string, any>;\n  sql: string;\n}\n\ninterface DatasetListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nconst DatasetList: FunctionComponent<DatasetListProps> = ({\n  addDangerToast,\n  addSuccessToast,\n  user,\n}) => {\n  const history = useHistory();\n  const {\n    state: {\n      loading,\n      resourceCount: datasetCount,\n      resourceCollection: datasets,\n      bulkSelectEnabled,\n    },\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Dataset>('dataset', t('dataset'), addDangerToast);\n\n  const [datasetCurrentlyDeleting, setDatasetCurrentlyDeleting] = useState<\n    (Dataset & { chart_count: number; dashboard_count: number }) | null\n  >(null);\n\n  const [datasetCurrentlyEditing, setDatasetCurrentlyEditing] =\n    useState<Dataset | null>(null);\n\n  const [datasetCurrentlyDuplicating, setDatasetCurrentlyDuplicating] =\n    useState<VirtualDataset | null>(null);\n\n  const [importingDataset, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState<\n    string[]\n  >([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState<\n    string[]\n  >([]);\n  const [\n    sshTunnelPrivateKeyPasswordFields,\n    setSSHTunnelPrivateKeyPasswordFields,\n  ] = useState<string[]>([]);\n\n  const PREVENT_UNSAFE_DEFAULT_URLS_ON_DATASET = useSelector<any, boolean>(\n    state =>\n      state.common?.conf?.PREVENT_UNSAFE_DEFAULT_URLS_ON_DATASET || false,\n  );\n\n  const openDatasetImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeDatasetImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleDatasetImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dataset imported'));\n  };\n\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canCreate = hasPerm('can_write');\n  const canDuplicate = hasPerm('can_duplicate');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n\n  const initialSort = SORT_BY;\n\n  const openDatasetEditModal = useCallback(\n    ({ id }: Dataset) => {\n      SupersetClient.get({\n        endpoint: `/api/v1/dataset/${id}`,\n      })\n        .then(({ json = {} }) => {\n          const addCertificationFields = json.result.columns.map(\n            (column: ColumnObject) => {\n              const {\n                certification: { details = '', certified_by = '' } = {},\n              } = JSON.parse(column.extra || '{}') || {};\n              return {\n                ...column,\n                certification_details: details || '',\n                certified_by: certified_by || '',\n                is_certified: details || certified_by,\n              };\n            },\n          );\n          // eslint-disable-next-line no-param-reassign\n          json.result.columns = [...addCertificationFields];\n          setDatasetCurrentlyEditing(json.result);\n        })\n        .catch(() => {\n          addDangerToast(\n            t('An error occurred while fetching dataset related data'),\n          );\n        });\n    },\n    [addDangerToast],\n  );\n\n  const openDatasetDeleteModal = (dataset: Dataset) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/dataset/${dataset.id}/related_objects`,\n    })\n      .then(({ json = {} }) => {\n        setDatasetCurrentlyDeleting({\n          ...dataset,\n          chart_count: json.charts.count,\n          dashboard_count: json.dashboards.count,\n        });\n      })\n      .catch(\n        createErrorHandler(errMsg =>\n          t(\n            'An error occurred while fetching dataset related data: %s',\n            errMsg,\n          ),\n        ),\n      );\n\n  const openDatasetDuplicateModal = (dataset: VirtualDataset) => {\n    setDatasetCurrentlyDuplicating(dataset);\n  };\n\n  const handleBulkDatasetExport = (datasetsToExport: Dataset[]) => {\n    const ids = datasetsToExport.map(({ id }) => id);\n    handleResourceExport('dataset', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { kind },\n          },\n        }: any) => {\n          if (kind === 'physical') {\n            return (\n              <Tooltip\n                id=\"physical-dataset-tooltip\"\n                title={t('Physical dataset')}\n              >\n                <Icons.DatasetPhysical />\n              </Tooltip>\n            );\n          }\n\n          return (\n            <Tooltip id=\"virtual-dataset-tooltip\" title={t('Virtual dataset')}>\n              <Icons.DatasetVirtual />\n            </Tooltip>\n          );\n        },\n        accessor: 'kind_icon',\n        disableSortBy: true,\n        size: 'xs',\n        id: 'id',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              extra,\n              table_name: datasetTitle,\n              description,\n              explore_url: exploreURL,\n            },\n          },\n        }: any) => {\n          let titleLink: JSX.Element;\n          if (PREVENT_UNSAFE_DEFAULT_URLS_ON_DATASET) {\n            titleLink = (\n              <Link data-test=\"internal-link\" to={exploreURL}>\n                {datasetTitle}\n              </Link>\n            );\n          } else {\n            titleLink = (\n              // exploreUrl can be a link to Explore or an external link\n              // in the first case use SPA routing, else use HTML anchor\n              <GenericLink to={exploreURL}>{datasetTitle}</GenericLink>\n            );\n          }\n          try {\n            const parsedExtra = JSON.parse(extra);\n            return (\n              <FlexRowContainer>\n                {parsedExtra?.certification && (\n                  <CertifiedBadge\n                    certifiedBy={parsedExtra.certification.certified_by}\n                    details={parsedExtra.certification.details}\n                    size=\"l\"\n                  />\n                )}\n                {parsedExtra?.warning_markdown && (\n                  <WarningIconWithTooltip\n                    warningMarkdown={parsedExtra.warning_markdown}\n                    size=\"l\"\n                  />\n                )}\n                {titleLink}\n                {description && (\n                  <InfoTooltip tooltip={description} viewBox=\"0 -1 24 24\" />\n                )}\n              </FlexRowContainer>\n            );\n          } catch {\n            return titleLink;\n          }\n        },\n        Header: t('Name'),\n        accessor: 'table_name',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { kind },\n          },\n        }: any) => (kind === 'physical' ? t('Physical') : t('Virtual')),\n        Header: t('Type'),\n        accessor: 'kind',\n        disableSortBy: true,\n        size: 'md',\n      },\n      {\n        Header: t('Database'),\n        accessor: 'database.database_name',\n        size: 'lg',\n      },\n      {\n        Header: t('Schema'),\n        accessor: 'schema',\n        size: 'lg',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => <span className=\"no-wrap\">{changedOn}</span>,\n        Header: t('Modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_by_name: changedByName },\n          },\n        }: any) => changedByName,\n        Header: t('Modified by'),\n        accessor: 'changed_by.first_name',\n        size: 'xl',\n      },\n      {\n        accessor: 'database',\n        disableSortBy: true,\n        hidden: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { owners = [] },\n          },\n        }: any) => <FacePile users={owners} />,\n        Header: t('Owners'),\n        id: 'owners',\n        disableSortBy: true,\n        size: 'lg',\n      },\n      {\n        accessor: 'sql',\n        hidden: true,\n        disableSortBy: true,\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          // Verify owner or isAdmin\n          const allowEdit =\n            original.owners.map((o: Owner) => o.id).includes(user.userId) ||\n            isUserAdmin(user);\n\n          const handleEdit = () => openDatasetEditModal(original);\n          const handleDelete = () => openDatasetDeleteModal(original);\n          const handleExport = () => handleBulkDatasetExport([original]);\n          const handleDuplicate = () => openDatasetDuplicateModal(original);\n          if (!canEdit && !canDelete && !canExport && !canDuplicate) {\n            return null;\n          }\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <Tooltip\n                  id=\"delete-action-tooltip\"\n                  title={t('Delete')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleDelete}\n                  >\n                    <Icons.Trash />\n                  </span>\n                </Tooltip>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={\n                    allowEdit\n                      ? t('Edit')\n                      : t(\n                          'You must be a dataset owner in order to edit. Please reach out to a dataset owner to request modifications or edit access.',\n                        )\n                  }\n                  placement=\"bottomRight\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className={allowEdit ? 'action-button' : 'disabled'}\n                    onClick={allowEdit ? handleEdit : undefined}\n                  >\n                    <Icons.EditAlt />\n                  </span>\n                </Tooltip>\n              )}\n              {canDuplicate && original.kind === 'virtual' && (\n                <Tooltip\n                  id=\"duplicate-action-tooltop\"\n                  title={t('Duplicate')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleDuplicate}\n                  >\n                    <Icons.Copy />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete && !canDuplicate,\n        disableSortBy: true,\n      },\n    ],\n    [canEdit, canDelete, canExport, openDatasetEditModal, canDuplicate, user],\n  );\n\n  const filterTypes: Filters = useMemo(\n    () => [\n      {\n        Header: t('Search'),\n        key: 'search',\n        id: 'table_name',\n        input: 'search',\n        operator: FilterOperator.contains,\n      },\n      {\n        Header: t('Owner'),\n        key: 'owner',\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.relationManyMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'dataset',\n          'owners',\n          createErrorHandler(errMsg =>\n            t(\n              'An error occurred while fetching dataset owner values: %s',\n              errMsg,\n            ),\n          ),\n          user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Database'),\n        key: 'database',\n        id: 'database',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'dataset',\n          'database',\n          createErrorHandler(errMsg =>\n            t('An error occurred while fetching datasets: %s', errMsg),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Schema'),\n        key: 'schema',\n        id: 'schema',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchDistinct(\n          'dataset',\n          'schema',\n          createErrorHandler(errMsg =>\n            t('An error occurred while fetching schema values: %s', errMsg),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Type'),\n        key: 'sql',\n        id: 'sql',\n        input: 'select',\n        operator: FilterOperator.datasetIsNullOrEmpty,\n        unfilteredLabel: 'All',\n        selects: [\n          { label: t('Virtual'), value: false },\n          { label: t('Physical'), value: true },\n        ],\n      },\n      {\n        Header: t('Certified'),\n        key: 'certified',\n        id: 'id',\n        urlDisplay: 'certified',\n        input: 'select',\n        operator: FilterOperator.datasetIsCertified,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n    ],\n    [user],\n  );\n\n  const menuData: SubMenuProps = {\n    activeChild: 'Datasets',\n    name: t('Datasets'),\n  };\n\n  const buttonArr: Array<ButtonProps> = [];\n\n  if (canDelete || canExport) {\n    buttonArr.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary',\n    });\n  }\n\n  if (canCreate) {\n    buttonArr.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Dataset')}{' '}\n        </>\n      ),\n      onClick: () => {\n        history.push('/dataset/add/');\n      },\n      buttonStyle: 'primary',\n    });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      buttonArr.push({\n        name: (\n          <Tooltip\n            id=\"import-tooltip\"\n            title={t('Import datasets')}\n            placement=\"bottomRight\"\n          >\n            <Icons.Import data-test=\"import-button\" />\n          </Tooltip>\n        ),\n        buttonStyle: 'link',\n        onClick: openDatasetImportModal,\n      });\n    }\n  }\n\n  menuData.buttons = buttonArr;\n\n  const closeDatasetDeleteModal = () => {\n    setDatasetCurrentlyDeleting(null);\n  };\n\n  const closeDatasetEditModal = () => {\n    setDatasetCurrentlyEditing(null);\n  };\n\n  const closeDatasetDuplicateModal = () => {\n    setDatasetCurrentlyDuplicating(null);\n  };\n\n  const handleDatasetDelete = ({ id, table_name: tableName }: Dataset) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/${id}`,\n    }).then(\n      () => {\n        refreshData();\n        setDatasetCurrentlyDeleting(null);\n        addSuccessToast(t('Deleted: %s', tableName));\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting %s: %s', tableName, errMsg),\n        ),\n      ),\n    );\n  };\n\n  const handleBulkDatasetDelete = (datasetsToDelete: Dataset[]) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/?q=${rison.encode(\n        datasetsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected datasets: %s', errMsg),\n        ),\n      ),\n    );\n  };\n\n  const handleDatasetDuplicate = (newDatasetName: string) => {\n    if (datasetCurrentlyDuplicating === null) {\n      addDangerToast(t('There was an issue duplicating the dataset.'));\n    }\n\n    SupersetClient.post({\n      endpoint: `/api/v1/dataset/duplicate`,\n      jsonPayload: {\n        base_model_id: datasetCurrentlyDuplicating?.id,\n        table_name: newDatasetName,\n      },\n    }).then(\n      () => {\n        setDatasetCurrentlyDuplicating(null);\n        refreshData();\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue duplicating the selected datasets: %s', errMsg),\n        ),\n      ),\n    );\n  };\n\n  return (\n    <>\n      <SubMenu {...menuData} />\n      {datasetCurrentlyDeleting && (\n        <DeleteModal\n          description={\n            <>\n              <p>\n                {t(\n                  'The dataset %s is linked to %s charts that appear on %s dashboards. Are you sure you want to continue? Deleting the dataset will break those objects.',\n                  datasetCurrentlyDeleting.table_name,\n                  datasetCurrentlyDeleting.chart_count,\n                  datasetCurrentlyDeleting.dashboard_count,\n                )}\n              </p>\n              {DatasetDeleteRelatedExtension && (\n                <DatasetDeleteRelatedExtension\n                  dataset={datasetCurrentlyDeleting}\n                />\n              )}\n            </>\n          }\n          onConfirm={() => {\n            if (datasetCurrentlyDeleting) {\n              handleDatasetDelete(datasetCurrentlyDeleting);\n            }\n          }}\n          onHide={closeDatasetDeleteModal}\n          open\n          title={t('Delete Dataset?')}\n        />\n      )}\n      {datasetCurrentlyEditing && (\n        <DatasourceModal\n          datasource={datasetCurrentlyEditing}\n          onDatasourceSave={refreshData}\n          onHide={closeDatasetEditModal}\n          show\n        />\n      )}\n      <DuplicateDatasetModal\n        dataset={datasetCurrentlyDuplicating}\n        onHide={closeDatasetDuplicateModal}\n        onDuplicate={handleDatasetDuplicate}\n      />\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t(\n          'Are you sure you want to delete the selected datasets?',\n        )}\n        onConfirm={handleBulkDatasetDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              onSelect: confirmDelete,\n              type: 'danger',\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkDatasetExport,\n            });\n          }\n          return (\n            <ListView<Dataset>\n              className=\"dataset-list-view\"\n              columns={columns}\n              data={datasets}\n              count={datasetCount}\n              pageSize={PAGE_SIZE}\n              fetchData={fetchData}\n              filters={filterTypes}\n              loading={loading}\n              initialSort={initialSort}\n              bulkActions={bulkActions}\n              bulkSelectEnabled={bulkSelectEnabled}\n              disableBulkSelect={toggleBulkSelect}\n              addDangerToast={addDangerToast}\n              addSuccessToast={addSuccessToast}\n              refreshData={refreshData}\n              renderBulkSelectCopy={selected => {\n                const { virtualCount, physicalCount } = selected.reduce(\n                  (acc, e) => {\n                    if (e.original.kind === 'physical') acc.physicalCount += 1;\n                    else if (e.original.kind === 'virtual') {\n                      acc.virtualCount += 1;\n                    }\n                    return acc;\n                  },\n                  { virtualCount: 0, physicalCount: 0 },\n                );\n\n                if (!selected.length) {\n                  return t('0 Selected');\n                }\n                if (virtualCount && !physicalCount) {\n                  return t(\n                    '%s Selected (Virtual)',\n                    selected.length,\n                    virtualCount,\n                  );\n                }\n                if (physicalCount && !virtualCount) {\n                  return t(\n                    '%s Selected (Physical)',\n                    selected.length,\n                    physicalCount,\n                  );\n                }\n\n                return t(\n                  '%s Selected (%s Physical, %s Virtual)',\n                  selected.length,\n                  physicalCount,\n                  virtualCount,\n                );\n              }}\n            />\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"dataset\"\n        resourceLabel={t('dataset')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleDatasetImport}\n        show={importingDataset}\n        onHide={closeDatasetImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n        sshTunnelPasswordFields={sshTunnelPasswordFields}\n        setSSHTunnelPasswordFields={setSSHTunnelPasswordFields}\n        sshTunnelPrivateKeyFields={sshTunnelPrivateKeyFields}\n        setSSHTunnelPrivateKeyFields={setSSHTunnelPrivateKeyFields}\n        sshTunnelPrivateKeyPasswordFields={sshTunnelPrivateKeyPasswordFields}\n        setSSHTunnelPrivateKeyPasswordFields={\n          setSSHTunnelPrivateKeyPasswordFields\n        }\n      />\n      {preparingExport && <Loading />}\n    </>\n  );\n};\n\nexport default withToasts(DatasetList);\n"],"names":["HelperMessage","styled","div","_ref","theme","colors","grayscale","base","_ref2","typography","sizes","s","StyledInputContainer","_ref3","gridUnit","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","light1","_ref10","_ref11","_ref12","light2","_ref13","_ref14","_ref15","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","show","onHide","passwordFields","setPasswordFields","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","isHidden","setIsHidden","useState","passwords","setPasswords","needsOverwriteConfirm","setNeedsOverwriteConfirm","confirmedOverwrite","setConfirmedOverwrite","fileList","setFileList","importingModel","setImportingModel","errorMessage","setErrorMessage","sshTunnelPasswords","setSSHTunnelPasswords","sshTunnelPrivateKeys","setSSHTunnelPrivateKeys","sshTunnelPrivateKeyPasswords","setSSHTunnelPrivateKeyPasswords","clearModal","state","alreadyExists","passwordsNeeded","sshPasswordNeeded","sshPrivateKeyNeeded","sshPrivateKeyPasswordNeeded","importResource","useImportResource","msg","useEffect","length","___EmotionJSX","Modal","name","className","disablePrimaryButton","onHandledPrimaryAction","onUpload","_fileList$","originFileObj","File","then","result","hide","primaryButtonName","t","primaryButtonType","width","title","Upload","id","accept","onChange","info","file","status","onRemove","removedFile","filter","uid","customRequest","disabled","Button","loading","ErrorAlert","showDbInstallInstructions","renderPasswordFields","files","Set","React","map","fileName","indexOf","key","slice","autoComplete","type","value","event","target","_event$currentTarget$","_event$currentTarget","targetValue","currentTarget","toUpperCase","dataset","onDuplicate","setShow","disableSave","setDisableSave","newDuplicateDatasetName","setNewDuplicateDatasetName","duplicateDataset","FormLabel","htmlFor","Input","_event$target$value","onPressEnter","DatasetDeleteRelatedExtension","getExtensionsRegistry","get","FlexRowContainer","Actions","withToasts","addDangerToast","addSuccessToast","user","history","useHistory","resourceCount","datasetCount","resourceCollection","datasets","bulkSelectEnabled","hasPerm","fetchData","toggleBulkSelect","refreshData","useListViewResource","datasetCurrentlyDeleting","setDatasetCurrentlyDeleting","datasetCurrentlyEditing","setDatasetCurrentlyEditing","datasetCurrentlyDuplicating","setDatasetCurrentlyDuplicating","importingDataset","showImportModal","preparingExport","setPreparingExport","PREVENT_UNSAFE_DEFAULT_URLS_ON_DATASET","useSelector","_state$common","_state$common$conf","common","conf","canEdit","canDelete","canCreate","canDuplicate","canExport","isFeatureEnabled","FeatureFlag","VERSIONED_EXPORT","initialSort","SORT_BY","openDatasetEditModal","useCallback","SupersetClient","endpoint","json","addCertificationFields","columns","column","certification","details","certified_by","JSON","parse","extra","certification_details","is_certified","catch","handleBulkDatasetExport","datasetsToExport","ids","handleResourceExport","useMemo","Cell","row","original","kind","Tooltip","Icons","DatasetPhysical","DatasetVirtual","accessor","disableSortBy","size","titleLink","table_name","datasetTitle","description","explore_url","exploreURL","Link","to","GenericLink","parsedExtra","CertifiedBadge","certifiedBy","warning_markdown","WarningIconWithTooltip","warningMarkdown","InfoTooltip","tooltip","viewBox","Header","changed_on_delta_humanized","changedOn","_ref16","changed_by_name","changedByName","hidden","_ref17","owners","FacePile","users","_ref18","allowEdit","o","includes","userId","isUserAdmin","placement","role","tabIndex","onClick","handleDelete","openDatasetDeleteModal","chart_count","charts","count","dashboard_count","dashboards","createErrorHandler","errMsg","Trash","handleExport","Share","handleEdit","undefined","EditAlt","handleDuplicate","Copy","filterTypes","input","operator","FilterOperator","contains","relationManyMany","unfilteredLabel","fetchSelects","createFetchRelated","paginate","relationOneMany","equals","createFetchDistinct","datasetIsNullOrEmpty","selects","label","urlDisplay","datasetIsCertified","menuData","activeChild","buttonArr","push","buttonStyle","Import","openDatasetImportModal","buttons","SubMenu","DeleteModal","onConfirm","handleDatasetDelete","_ref19","tableName","delete","closeDatasetDeleteModal","open","DatasourceModal","datasource","onDatasourceSave","closeDatasetEditModal","DuplicateDatasetModal","closeDatasetDuplicateModal","newDatasetName","post","jsonPayload","base_model_id","ConfirmStatusChange","datasetsToDelete","rison","_ref20","_ref21","message","confirmDelete","bulkActions","onSelect","ListView","data","pageSize","PAGE_SIZE","filters","disableBulkSelect","renderBulkSelectCopy","selected","virtualCount","physicalCount","reduce","acc","e","ImportModelsModal","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","handleDatasetImport","closeDatasetImportModal","Loading"],"sourceRoot":""}