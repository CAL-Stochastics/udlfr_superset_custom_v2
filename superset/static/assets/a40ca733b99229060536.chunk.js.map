{"version":3,"file":"a40ca733b99229060536.chunk.js","mappings":"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","sources":["webpack://superset/./plugins/plugin-chart-echarts/src/Waterfall/EchartsWaterfall.tsx","webpack://superset/./plugins/plugin-chart-echarts/src/components/Echart.tsx","webpack://superset/./plugins/plugin-chart-echarts/src/utils/eventHandlers.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback } from 'react';\nimport Echart from '../components/Echart';\nimport { allEventHandlers } from '../utils/eventHandlers';\nimport { WaterfallChartTransformedProps } from './types';\n\nexport default function EchartsWaterfall(\n  props: WaterfallChartTransformedProps,\n) {\n  const {\n    height,\n    width,\n    echartOptions,\n    setDataMask,\n    labelMap,\n    groupby,\n    refs,\n    selectedValues,\n  } = props;\n  const handleChange = useCallback(\n    (values: string[]) => {\n      const groupbyValues = values.map(value => labelMap[value]);\n\n      setDataMask({\n        extraFormData: {\n          filters:\n            values.length === 0\n              ? []\n              : groupby.map((col, idx) => {\n                  const val = groupbyValues.map(v => v[idx]);\n                  if (val === null || val === undefined)\n                    return {\n                      col,\n                      op: 'IS NULL',\n                    };\n                  return {\n                    col,\n                    op: 'IN',\n                    val: val as (string | number | boolean)[],\n                  };\n                }),\n        },\n        filterState: {\n          value: groupbyValues.length ? groupbyValues : null,\n          selectedValues: values.length ? values : null,\n        },\n      });\n    },\n    [setDataMask, groupby, labelMap],\n  );\n\n  const eventHandlers = {\n    ...allEventHandlers(props),\n    handleChange,\n  };\n\n  return (\n    <Echart\n      refs={refs}\n      height={height}\n      width={width}\n      echartOptions={echartOptions}\n      eventHandlers={eventHandlers}\n      selectedValues={selectedValues}\n    />\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  forwardRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  useCallback,\n} from 'react';\nimport { styled } from '@superset-ui/core';\nimport { ECharts, init } from 'echarts';\nimport { EchartsHandler, EchartsProps, EchartsStylesProps } from '../types';\n\nconst Styles = styled.div<EchartsStylesProps>`\n  height: ${({ height }) => height};\n  width: ${({ width }) => width};\n`;\n\nfunction Echart(\n  {\n    width,\n    height,\n    echartOptions,\n    eventHandlers,\n    zrEventHandlers,\n    selectedValues = {},\n    refs,\n  }: EchartsProps,\n  ref: React.Ref<EchartsHandler>,\n) {\n  const divRef = useRef<HTMLDivElement>(null);\n  if (refs) {\n    // eslint-disable-next-line no-param-reassign\n    refs.divRef = divRef;\n  }\n  const chartRef = useRef<ECharts>();\n  const currentSelection = useMemo(\n    () => Object.keys(selectedValues) || [],\n    [selectedValues],\n  );\n  const previousSelection = useRef<string[]>([]);\n\n  useImperativeHandle(ref, () => ({\n    getEchartInstance: () => chartRef.current,\n  }));\n\n  useEffect(() => {\n    if (!divRef.current) return;\n    if (!chartRef.current) {\n      chartRef.current = init(divRef.current);\n    }\n\n    Object.entries(eventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.off(name);\n      chartRef.current?.on(name, handler);\n    });\n\n    Object.entries(zrEventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.getZr().off(name);\n      chartRef.current?.getZr().on(name, handler);\n    });\n\n    chartRef.current.setOption(echartOptions, true);\n  }, [echartOptions, eventHandlers, zrEventHandlers]);\n\n  // highlighting\n  useEffect(() => {\n    if (!chartRef.current) return;\n    chartRef.current.dispatchAction({\n      type: 'downplay',\n      dataIndex: previousSelection.current.filter(\n        value => !currentSelection.includes(value),\n      ),\n    });\n    if (currentSelection.length) {\n      chartRef.current.dispatchAction({\n        type: 'highlight',\n        dataIndex: currentSelection,\n      });\n    }\n    previousSelection.current = currentSelection;\n  }, [currentSelection]);\n\n  const handleSizeChange = useCallback(\n    ({ width, height }: { width: number; height: number }) => {\n      if (chartRef.current) {\n        chartRef.current.resize({ width, height });\n      }\n    },\n    [],\n  );\n\n  // did mount\n  useEffect(() => {\n    handleSizeChange({ width, height });\n    return () => chartRef.current?.dispose();\n  }, []);\n\n  useLayoutEffect(() => {\n    handleSizeChange({ width, height });\n  }, [width, height, handleSizeChange]);\n\n  return <Styles ref={divRef} height={height} width={width} />;\n}\n\nexport default forwardRef(Echart);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  BinaryQueryObjectFilterClause,\n  ContextMenuFilters,\n  DataMask,\n  QueryFormColumn,\n  QueryFormData,\n  getColumnLabel,\n  getNumberFormatter,\n  getTimeFormatter,\n} from '@superset-ui/core';\n\nimport {\n  BaseTransformedProps,\n  CrossFilterTransformedProps,\n  EventHandlers,\n} from '../types';\nimport { formatSeriesName } from './series';\n\nexport type Event = {\n  name: string;\n  event: { stop: () => void; event: PointerEvent };\n};\n\nconst getCrossFilterDataMask =\n  (\n    selectedValues: Record<number, string>,\n    groupby: QueryFormColumn[],\n    labelMap: Record<string, string[]>,\n  ) =>\n  (value: string) => {\n    const selected = Object.values(selectedValues);\n    let values: string[];\n    if (selected.includes(value)) {\n      values = selected.filter(v => v !== value);\n    } else {\n      values = [value];\n    }\n\n    const groupbyValues = values.map(value => labelMap[value]);\n\n    return {\n      dataMask: {\n        extraFormData: {\n          filters:\n            values.length === 0\n              ? []\n              : groupby.map((col, idx) => {\n                  const val = groupbyValues.map(v => v[idx]);\n                  if (val === null || val === undefined)\n                    return {\n                      col,\n                      op: 'IS NULL' as const,\n                    };\n                  return {\n                    col,\n                    op: 'IN' as const,\n                    val: val as (string | number | boolean)[],\n                  };\n                }),\n        },\n        filterState: {\n          value: groupbyValues.length ? groupbyValues : null,\n          selectedValues: values.length ? values : null,\n        },\n      },\n      isCurrentValueSelected: selected.includes(value),\n    };\n  };\n\nexport const clickEventHandler =\n  (\n    getCrossFilterDataMask: (\n      value: string,\n    ) => ContextMenuFilters['crossFilter'],\n    setDataMask: (dataMask: DataMask) => void,\n    emitCrossFilters?: boolean,\n  ) =>\n  ({ name }: { name: string }) => {\n    if (!emitCrossFilters) {\n      return;\n    }\n    const dataMask = getCrossFilterDataMask(name)?.dataMask;\n    if (dataMask) {\n      setDataMask(dataMask);\n    }\n  };\n\nexport const contextMenuEventHandler =\n  (\n    groupby: (BaseTransformedProps<any> &\n      CrossFilterTransformedProps)['groupby'],\n    onContextMenu: BaseTransformedProps<any>['onContextMenu'],\n    labelMap: Record<string, string[]>,\n    getCrossFilterDataMask: (\n      value: string,\n    ) => ContextMenuFilters['crossFilter'],\n    formData: QueryFormData,\n    coltypeMapping?: Record<string, number>,\n  ) =>\n  (e: Event) => {\n    if (onContextMenu) {\n      e.event.stop();\n      const pointerEvent = e.event.event;\n      const drillFilters: BinaryQueryObjectFilterClause[] = [];\n      if (groupby.length > 0) {\n        const values = labelMap[e.name];\n        groupby.forEach((dimension, i) => {\n          drillFilters.push({\n            col: dimension,\n            op: '==',\n            val: values[i],\n            formattedVal: formatSeriesName(values[i], {\n              timeFormatter: getTimeFormatter(formData.dateFormat),\n              numberFormatter: getNumberFormatter(formData.numberFormat),\n              coltype: coltypeMapping?.[getColumnLabel(dimension)],\n            }),\n          });\n        });\n      }\n      onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n        drillToDetail: drillFilters,\n        crossFilter: getCrossFilterDataMask(e.name),\n        drillBy: { filters: drillFilters, groupbyFieldName: 'groupby' },\n      });\n    }\n  };\n\nexport const allEventHandlers = (\n  transformedProps: BaseTransformedProps<any> & CrossFilterTransformedProps,\n) => {\n  const {\n    groupby,\n    onContextMenu,\n    setDataMask,\n    labelMap,\n    emitCrossFilters,\n    selectedValues,\n    coltypeMapping,\n    formData,\n  } = transformedProps;\n  const eventHandlers: EventHandlers = {\n    click: clickEventHandler(\n      getCrossFilterDataMask(selectedValues, groupby, labelMap),\n      setDataMask,\n      emitCrossFilters,\n    ),\n    contextmenu: contextMenuEventHandler(\n      groupby,\n      onContextMenu,\n      labelMap,\n      getCrossFilterDataMask(selectedValues, groupby, labelMap),\n      formData,\n      coltypeMapping,\n    ),\n  };\n  return eventHandlers;\n};\n"],"names":["EchartsWaterfall","props","height","width","echartOptions","setDataMask","labelMap","groupby","refs","selectedValues","handleChange","useCallback","values","groupbyValues","map","value","extraFormData","filters","length","col","idx","val","v","op","filterState","eventHandlers","allEventHandlers","___EmotionJSX","Echart","Styles","styled","div","_ref","_ref2","_ref3","ref","zrEventHandlers","divRef","useRef","chartRef","currentSelection","useMemo","Object","keys","previousSelection","useImperativeHandle","getEchartInstance","current","useEffect","init","entries","forEach","_ref4","_chartRef$current","_chartRef$current2","name","handler","off","on","_ref5","_chartRef$current3","_chartRef$current4","getZr","setOption","dispatchAction","type","dataIndex","filter","includes","handleSizeChange","_ref6","resize","_chartRef$current5","dispose","useLayoutEffect","forwardRef","getCrossFilterDataMask","selected","dataMask","isCurrentValueSelected","clickEventHandler","emitCrossFilters","_getCrossFilterDataMa","contextMenuEventHandler","onContextMenu","formData","coltypeMapping","e","event","stop","pointerEvent","drillFilters","dimension","i","push","formattedVal","formatSeriesName","timeFormatter","getTimeFormatter","dateFormat","numberFormatter","getNumberFormatter","numberFormat","coltype","getColumnLabel","clientX","clientY","drillToDetail","crossFilter","drillBy","groupbyFieldName","transformedProps","click","contextmenu"],"sourceRoot":""}